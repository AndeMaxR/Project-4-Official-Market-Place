import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.Socket;
import java.net.UnknownHostException;

/**
 * Market Client
 *
 * This class handles the GUI and sends input to the server for processing.
 *
 * @author Mark Herman, Max Anderson, Colin McKee, Aarnav Bomma, Section L06
 *
 * @version 4/18/2023
 */
public class MarketClient extends JComponent implements Runnable {
    // initialize the buttons
    String username;
    String password;
    JButton login;
    JButton signup;
    JButton cancel;
    JTextField usernameTextBox;
    JTextField passwordTextBox;
    MarketClient marketClient;

    // listen for buttons being pressed

    // button methods
    public void loginMethod() {

    }
    public void signupMethod() {

    }
    public void cancelMethod() {

    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new MarketClient());
    }
    //todo Make methods for each individual panel that return boolean value so that way we can move through out panels

    @Override
    public void run() {
        try {
            Socket socket = new Socket("localhost", 4242);
            register(socket);
        } catch (UnknownHostException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

    }

    public void register(Socket socket) {
        // create a new frame for the Welcome screen
        JFrame frame = new JFrame();

        //todo add action Listeners ##############################################################
        //Added Cancel ActionListener
        ActionListener registerActions = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (e.getSource() == cancel) {
                    frame.dispose();
                }
                // if login is pressed
                if (e.getSource() == login) {
                    login(socket, frame);
                }
                // if signup is pressed
                if (e.getSource() == signup) {
                    signup(socket);
                }

            }
        };
        //todo add action Listeners ##############################################################

        frame.setTitle("Welcome");
        Container content = frame.getContentPane();
        //content.setLayout(new BorderLayout());
        content.setLayout(new GridLayout(5, 3,20,5));
        marketClient = this;
        frame.setSize(600, 400);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setVisible(true);
        //initialize the button objects
        login = new JButton("Login");
        login.addActionListener(registerActions);
        signup = new JButton("Sign-up");
        signup.addActionListener(registerActions);
        cancel = new JButton("Cancel");
        cancel.addActionListener(registerActions);

        // initialize the textField objects
        usernameTextBox = new JTextField("",20);
        usernameTextBox.setSize(20, 5);
        passwordTextBox = new JTextField("",20);
        passwordTextBox.setSize(20, 5);

        // add the panels to the frame so they are visible when run
        content.add(new JLabel(""));
        content.add(new JLabel(""));
        content.add(new JLabel(""));
        content.add(new JLabel("                        Username:"));
        content.add(usernameTextBox);
        content.add(new JLabel(""));
        content.add(new JLabel("                        Password:"));
        content.add(passwordTextBox);
        content.add(new JLabel(""));
        content.add(new JLabel(""));
        content.add(new JLabel(""));
        content.add(new JLabel(""));
        content.add(login);
        content.add(signup);
        content.add(cancel);
    }

    /**
     * This takes in the socket as the input so that way we can pass information back and forth to the
     * connected socket.
     *
     * initially we write username,password to the server.
     * the server will check to see if the user input matches any made accounts, if it matches the server will return 1,
     * if it doesn't match the server will return a number 0.
     *
     * @param socket
     */
    public void login(Socket socket, Frame frame) {
        try {
            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out.write(usernameTextBox.getText() + "," + passwordTextBox.getText() + "\n");
            out.flush();
            out.close();
            
            int decision = Integer.parseInt(in.readLine());
            if (decision == 1) {
                JOptionPane.showMessageDialog(null,"You have successfully been logged in "
                        + usernameTextBox.getText() + "!", "Login", JOptionPane.PLAIN_MESSAGE);

                username = usernameTextBox.getText();
                password = passwordTextBox.getText();
                String type = in.readLine();
                in.close();
                if (type.contains("SELLER")) {
                    frame.setVisible(false);
                    seller(socket);
                } else {
                    frame.setVisible(false);
                    customer(socket);
                }
            } else {
                in.close();
                JOptionPane.showMessageDialog(null,"Login failed, your username or"
                        + " password was incorrect", "Login", JOptionPane.PLAIN_MESSAGE);
            }

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null,"IOException", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void signup(Socket socket) {

    }
    
    public void seller(Socket socket) {
        
    }
    
    public void customer(Socket socket) {
        
    }
}
